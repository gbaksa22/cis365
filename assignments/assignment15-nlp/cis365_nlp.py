# -*- coding: utf-8 -*-
"""cis365_nlp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17-IAKA6bsABEcSO2ZnL_F5DWXNKXX9EG
"""

import gensim
from gensim.models import Word2Vec
from gensim.test.utils import datapath
from gensim.utils import tokenize
from gensim.models.word2vec import PathLineSentences
from gensim.utils import simple_preprocess
import os
import urllib.request
import zipfile
import random

"""Part 1"""

# Step 1: Define a small corpus
corpus = [
    "This is a sample sentence for Word2Vec.",
    "Word2Vec generates word embeddings.",
    "This is the final sample sentence for testing."
]

# Step 2: Preprocess the corpus
from gensim.utils import simple_preprocess
processed_corpus = [simple_preprocess(doc) for doc in corpus]

# Display the processed corpus
print("Processed Corpus:")
print(processed_corpus)

# Step 3: Train the Word2Vec model
from gensim.models import Word2Vec

model = Word2Vec(
    sentences=processed_corpus,
    vector_size=50,  # Dimensionality of word embeddings
    window=3,        # Context window size
    min_count=1,     # Minimum frequency count of words
    sg=0,            # Skip-gram (1) or CBOW (0)
    epochs=10        # Number of training epochs
)

print("Word2Vec model trained successfully!")

# Step 4: Select a word from the corpus and find similar words
word = "sample"  # Replace with a word from your corpus
try:
    similar_words = model.wv.most_similar(word, topn=5)
    print(f"Words similar to '{word}':")
    for similar_word, score in similar_words:
        print(f"{similar_word}: {score}")
except KeyError:
    print(f"Word '{word}' not found in vocabulary!")

# Step 5: Calculate similarity between two words
word1 = "sample"  # Replace with a word from your corpus
word2 = "testing"  # Replace with another word from your corpus
try:
    similarity = model.wv.similarity(word1, word2)
    print(f"Similarity between '{word1}' and '{word2}': {similarity}")
except KeyError as e:
    print(f"Error with word: {e}")

# Step 6: Word vector arithmetic
try:
    result = model.wv.most_similar(positive=["sample", "testing"], negative=["is"], topn=1)
    print("Result of vector arithmetic ('sample' + 'testing' - 'is'):")
    print(result)
except KeyError as e:
    print(f"Error: {e}")

"""Part 2"""

# Step 1: Download and unzip the Text8 dataset
import os
import urllib.request
import zipfile

dataset_url = "http://mattmahoney.net/dc/text8.zip"
dataset_path = "text8.zip"
corpus_file = "text8"

if not os.path.exists(corpus_file):
    print("Downloading the Text8 dataset...")
    urllib.request.urlretrieve(dataset_url, dataset_path)
    print("Unzipping the dataset...")
    with zipfile.ZipFile(dataset_path, "r") as zip_ref:
        zip_ref.extractall()
    print("Dataset downloaded and extracted.")
else:
    print("Dataset already exists.")

# Step 2: Load and process the Text8 dataset
from gensim.models.word2vec import PathLineSentences

sentences = PathLineSentences(corpus_file)
print("Dataset loaded and ready for Word2Vec training.")

# Step 3: Train the Word2Vec model on Text8 data
from gensim.models import Word2Vec

from gensim.models.callbacks import CallbackAny2Vec

# Define a callback to display training progress
class EpochLogger(CallbackAny2Vec):
    def __init__(self):
        self.epoch = 0

    def on_epoch_begin(self, model):
        print(f"Epoch {self.epoch + 1} starting...")

    def on_epoch_end(self, model):
        print(f"Epoch {self.epoch + 1} finished.")
        self.epoch += 1

# Instantiate the callback
epoch_logger = EpochLogger()

# Train the Word2Vec model with progress logging
text8_model = Word2Vec(
    sentences=sentences,
    vector_size=100,  # Larger vector size for more complex data
    window=5,         # Larger context window
    min_count=5,      # Ignore infrequent words
    sg=1,             # Using skip-gram
    epochs=10,        # Train for 10 epochs
    compute_loss=True,  # To track training loss
    callbacks=[epoch_logger]  # Pass the callback for progress
)

print("Word2Vec model trained on the Text8 dataset!")

# Step 4: Experiment with vector arithmetic
try:
    result = text8_model.wv.most_similar(positive=['king', 'woman'], negative=['man'], topn=1)
    print("\nVector arithmetic result for 'king - man + woman':")
    print(result)
except KeyError as e:
    print(f"Error: {e}")

# Step 5: Visualize word embeddings with PCA
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Define your words
words = [
    'athlete', 'soccer', 'basketball', 'gym', 'fitness', 'training',
    'protein', 'pizza', 'salad', 'burger', 'volleyball', 'football', 'spikeball',
    'bench', 'squat', 'deadlift', 'workout', 'coach', 'goal', 'touchdown',
    'run', 'strength', 'energy', 'competition', 'nutrition', 'muscle', 'yoga', 'game'
]

# Filter words to include only those in the model's vocabulary
filtered_words = [word for word in words if word in text8_model.wv]
word_vectors = [text8_model.wv[word] for word in filtered_words]

# Perform PCA for dimensionality reduction
pca = PCA(n_components=2)
reduced_vectors = pca.fit_transform(word_vectors)

# Plot the word embeddings
plt.figure(figsize=(10, 8))
for i, word in enumerate(filtered_words):
    plt.scatter(reduced_vectors[i, 0], reduced_vectors[i, 1])
    plt.text(reduced_vectors[i, 0] + 0.02, reduced_vectors[i, 1] + 0.02, word)

plt.title("Word2Vec Word Embeddings Visualization")
plt.show()

"""Part 3"""

import random

# Step 1: Define a function to generate a sentence
def generate_sentence(model, seed_word, length=10):
    sentence = [seed_word]
    current_word = seed_word

    for _ in range(length - 1):  # Generate the rest of the sentence
        try:
            similar_words = model.wv.most_similar(current_word, topn=10)
            current_word = random.choice(similar_words)[0]  # Randomly select a similar word
            sentence.append(current_word)
        except KeyError:
            print(f"Word '{current_word}' not in vocabulary! Ending sentence generation.")
            break

    return " ".join(sentence)

# Step 2: Choose a seed word and generate a sentence
seed_word = "athlete"  # Replace with your desired seed word
sentence = generate_sentence(text8_model, seed_word, length=15)

print(f"Generated sentence starting with '{seed_word}':")
print(sentence)

import nltk
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger_eng')

from nltk.corpus import wordnet as wn

# Step 1: Define an advanced sentence generation function
def generate_advanced_sentence(model, seed_word, length=10):
    sentence = [seed_word]
    current_word = seed_word

    for _ in range(length - 1):  # Generate the rest of the sentence
        try:
            similar_words = model.wv.most_similar(current_word, topn=10)
            # Filter similar words to ensure they have the same part of speech
            valid_words = [word for word, score in similar_words if wn.synsets(word)]
            if valid_words:
                current_word = random.choice(valid_words)  # Randomly select a valid word
                sentence.append(current_word)
            else:
                break
        except KeyError:
            print(f"Word '{current_word}' not in vocabulary! Ending sentence generation.")
            break

    return " ".join(sentence)

# Step 2: Use the advanced generator
seed_word = "soccer"  # Replace with your desired seed word
advanced_sentence = generate_advanced_sentence(text8_model, seed_word, length=15)

print(f"Advanced generated sentence starting with '{seed_word}':")
print(advanced_sentence)

custom_corpus = [
    # Sports-related sentences
    "Soccer players practice daily to improve their skills.",
    "Basketball requires teamwork and coordination.",
    "The football team celebrated their victory with the fans.",
    "Running long distances builds endurance and mental toughness.",
    "Athletes train to strengthen their muscles and improve flexibility.",
    "The coach devised a new strategy for the upcoming match.",
    "Volleyball players work on spiking and blocking during practice.",
    "Cycling is a great way to build cardiovascular endurance.",
    "Hiking is both a sport and a recreational activity.",
    "The swimmer broke a record at the championship meet.",
    "The tennis match was intense and filled with long rallies.",
    "Cheering from fans motivated the team during the game.",
    "A rugby match requires strength and quick decision-making.",
    "Skiing down the slopes requires balance and precision.",
    "Ice skating is a beautiful combination of sport and art.",
    "Athletes compete for medals in international tournaments.",
    "The quarterback threw a perfect pass to score a touchdown.",
    "Boxers train to improve their speed and stamina in the ring.",
    "Rowing teams must synchronize their movements to win races.",
    "Martial arts teach discipline, focus, and self-defense skills.",
    "The baseball pitcher practiced his fastball and curveball.",
    "The soccer forward scored a brilliant goal in the last minute.",
    "Sprinters rely on explosive power to win short-distance races.",
    "The gymnast performed a flawless routine on the balance beam.",
    "The hockey team practiced passing and shooting drills.",
    "A golf swing requires precision and proper technique.",
    "Rock climbing challenges both physical and mental strength.",
    "The marathon runner trained for months to build endurance.",
    "Surfing the waves requires agility and quick reflexes.",
    "Pole vaulters need speed, strength, and precision to succeed.",
    # Fitness-related sentences
    "Deadlifts build strength in the back and legs.",
    "Squats are a great exercise for building lower-body strength.",
    "Bench presses are a popular workout for chest muscles.",
    "Athletes focus on core strength to improve balance and stability.",
    "Yoga improves flexibility and reduces stress levels.",
    "High-intensity interval training burns calories quickly.",
    "Fitness enthusiasts often track their progress with apps.",
    "Stretching before and after exercise prevents injuries.",
    "Weightlifting helps build muscle and improve strength.",
    "A strong mindset is essential for achieving fitness goals.",
    "Rowing machines provide a full-body workout.",
    "Cycling is an excellent low-impact exercise for beginners.",
    "The treadmill is a staple in most gym routines.",
    "Box jumps are an explosive exercise for building leg power.",
    "Push-ups are a classic bodyweight exercise for upper-body strength.",
    "Lunges improve balance and strengthen leg muscles.",
    "Planks target the core and improve overall stability.",
    "Kettlebell swings are a dynamic workout for power and endurance.",
    "Athletes often incorporate agility drills into their training.",
    "Resistance bands are versatile tools for strength training.",
    "Plyometric exercises enhance speed and power for sports.",
    "Proper breathing is crucial during intense physical activity.",
    "Recovery days are important for muscle repair and growth.",
    "Foam rolling helps reduce muscle soreness after workouts.",
    # Food-related sentences
    "A balanced diet is essential for athletic performance.",
    "Protein is important for muscle recovery and growth.",
    "Athletes often eat high-carb meals before a big game.",
    "Fruits and vegetables provide essential vitamins and minerals.",
    "Hydration is critical for maintaining energy during workouts.",
    "Salads are a healthy meal option for active individuals.",
    "Cheat meals like pizza are a treat for athletes on rest days.",
    "Smoothies are a popular post-workout snack.",
    "Nuts and seeds are a great source of healthy fats.",
    "Whole grains like quinoa and brown rice provide long-lasting energy.",
    "Avocados are a nutrient-dense superfood for athletes.",
    "Meal prepping helps busy athletes stick to their nutrition plans.",
    "Protein shakes are a convenient option for post-workout recovery.",
    "Oatmeal is a popular breakfast for sustained energy throughout the day.",
    "Fish like salmon and tuna are rich in omega-3 fatty acids.",
    "Greek yogurt is a great source of protein and probiotics.",
    "Eggs are a versatile and protein-rich food for athletes.",
    "Dark chocolate is a healthier alternative for satisfying sweet cravings.",
    "Smoothie bowls are packed with nutrients and make a great snack.",
    "Energy bars are convenient for fueling workouts.",
    "Leafy greens like spinach and kale are rich in nutrients.",
    "Eating smaller, frequent meals helps maintain energy levels.",
    "Bananas are a favorite pre-workout snack for quick energy.",
    "Trail mix is a portable snack for outdoor activities.",
    "Chia seeds are loaded with fiber and omega-3s.",
    "Watermelon is a refreshing snack after a hot workout.",
    "Cottage cheese is a great source of slow-digesting protein.",
    "Sweet potatoes are a nutrient-dense carbohydrate source.",
    "Hummus is a healthy dip for vegetables and crackers."
]


# Preprocess the corpus
processed_custom_corpus = [simple_preprocess(doc) for doc in custom_corpus]

from gensim.models.callbacks import CallbackAny2Vec

class TrainingLogger(CallbackAny2Vec):
    """Logs training progress for each epoch."""
    def __init__(self):
        self.epoch = 0
        self.loss_previous_step = 0

    def on_epoch_begin(self, model):
        print(f"Epoch {self.epoch + 1} starting...")

    def on_epoch_end(self, model):
        current_loss = model.get_latest_training_loss()
        loss_this_epoch = current_loss - self.loss_previous_step
        print(f"Epoch {self.epoch + 1} finished. Loss this epoch: {loss_this_epoch:.2f}")
        self.loss_previous_step = current_loss
        self.epoch += 1

# Initialize the callback
training_logger = TrainingLogger()

# Train the Word2Vec model with verbose output
custom_model = Word2Vec(
    sentences=processed_custom_corpus,
    vector_size=50,
    window=3,
    min_count=1,
    sg=1,
    epochs=100000,  # Adjust epochs as needed
    compute_loss=True,  # Enable loss tracking
    callbacks=[training_logger]  # Attach the logger
)

import random
from nltk import pos_tag
from nltk.corpus import wordnet as wn
import nltk

# Ensure required resources are downloaded
nltk.download("averaged_perceptron_tagger")
nltk.download("wordnet")

# Map POS tags to WordNet POS
def get_wordnet_pos(treebank_tag):
    if treebank_tag.startswith('J'):
        return wn.ADJ
    elif treebank_tag.startswith('V'):
        return wn.VERB
    elif treebank_tag.startswith('N'):
        return wn.NOUN
    elif treebank_tag.startswith('R'):
        return wn.ADV
    else:
        return None

# Generate a balanced sentence
def generate_balanced_sentence(model, seed_word, length=10):
    sentence = [seed_word]
    current_word = seed_word

    for _ in range(length - 1):
        try:
            similar_words = model.wv.most_similar(current_word, topn=15)
            # Tag words with parts of speech
            tagged_words = pos_tag([word for word, _ in similar_words])
            nouns = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.NOUN]
            verbs = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.VERB]
            adjectives = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.ADJ]

            # Prioritize adding a verb if not enough verbs have been used
            if len([w for w in sentence if pos_tag([w])[0][1].startswith('V')]) < 2 and verbs:
                current_word = random.choice(verbs)
            # Otherwise, mix nouns, verbs, and adjectives
            else:
                valid_words = nouns + verbs + adjectives
                if valid_words:
                    current_word = random.choice(valid_words)
                else:
                    break

            sentence.append(current_word)

        except KeyError:
            print(f"Word '{current_word}' not in vocabulary! Ending sentence generation.")
            break

    return " ".join(sentence)

# Generate a balanced sentence using the trained model
seed_word = "soccer"  # Replace with your desired seed word
balanced_sentence = generate_balanced_sentence(custom_model, seed_word, length=15)

print(f"Balanced generated sentence starting with '{seed_word}':")
print(balanced_sentence)

def generate_grammatically_correct_sentence(model, seed_word):
    """
    Generate a sentence that adheres to a basic Subject-Verb-Object-Adjective structure.
    Args:
        model: Trained Word2Vec model.
        seed_word: Starting word (typically a noun for the subject).
    Returns:
        A grammatically correct sentence as a string.
    """
    # Define placeholders for sentence structure
    subject = seed_word  # Start with the seed word as the subject
    verb = ""
    obj = ""
    adjective = ""

    try:
        # Generate a verb related to the subject
        similar_words = model.wv.most_similar(subject, topn=15)
        tagged_words = pos_tag([word for word, _ in similar_words])
        verbs = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.VERB]
        if verbs:
            verb = random.choice(verbs)

        # Generate an object related to the verb
        similar_words = model.wv.most_similar(verb, topn=15)
        tagged_words = pos_tag([word for word, _ in similar_words])
        nouns = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.NOUN]
        if nouns:
            obj = random.choice(nouns)

        # Generate an adjective related to the object
        similar_words = model.wv.most_similar(obj, topn=15)
        tagged_words = pos_tag([word for word, _ in similar_words])
        adjectives = [word for word, tag in tagged_words if get_wordnet_pos(tag) == wn.ADJ]
        if adjectives:
            adjective = random.choice(adjectives)

    except KeyError:
        print("One of the words is not in the vocabulary. Sentence generation stopped.")

    # Construct the sentence
    sentence = f"{subject.capitalize()} {verb} the {adjective} {obj}."
    return sentence

seed_word = "football"  # Replace with your desired seed word
sentence = generate_grammatically_correct_sentence(custom_model, seed_word)

print("Generated grammatically correct sentence:")
print(sentence)